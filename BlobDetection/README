Efficient detection of connection components.
Pick up some ideas of Reactivision und cvblobslib.


==== 1. THRESHBLOB ALGORITHM ======

CAPABILITIES:
 - Splits greyscale images into two color regions and
 	'search' blobs. The algorithm returns a tree structure of 
	founded blobs. The blobs can be nested. 

REMARKS:
 - Optional evaluation of blob bounding boxes.
 - Define region of interrest (ROI) to reduce evaluation time.
 - Coarse horizontal and/or vertical search to reduce evaluation time.
 - The algorithm is faster as cvblobblib's one. (Even the slowest variant.)
 - If an image has W*H pixels you scale down the blob search by factor x*y
   the runtime is between O(W*H) and O(W*H/(x*y)). (For few blobs near to
   O(W*H/(x*y)).)
 - node->data.area contains the exact number of pixels, not the bounding box area. (if stepwidth=1).
 - Easy filtering of result nodes.
 - Greyscale values are distict by thresh value in two regions. It's easy to extend
   the algorithm to more than two colors. (Well, it wasn't so easy, see second algorithm...)


EXAMPLE:
	Input (28x28):
	░░░░░░░░░░░░░░░░░░░░░░░░░░░░  
	░░░░░░░░██░░░░░░░█░███████░░  
	░░█████░██░░░░░░░█░█░░░░░█░░  
	░░█████░██░░███░░█░█░███░█░░  
	░░█████░██░░███░░█░█░███░█░░  
	░░█████░██░░███░░█░█░███░█░░  
	░░█████░██░░░░░░░█░█░░░░░█░░  
	░░░░░░░░██░░░░░░░█░███████░░  
	░█████████████████░░░░░░░░░░  
	░░░░░░░░░█████████░░░░░░░░░░  
	░░░░░░░░░█░░░░░░░█░░░░░░░░░░  
	░░░░░░░░░█░█████░█░░█████░░░  
	░░░░░░░░░█░█████░█░░█████░░░  
	░░░░░░░░░█░██░██░█░░█████░░░  
	░░░░░░░░░█░█████░█░░█████░░░  
	░░░░░░░░░█░█████░█░░█████░░░  
	░░░░░░░░░█░░░░░░░█░░░░░░░░░░  
	░░░░░░░░░█████████░░░░░░░░░░  
	░██████████████████████████░  
	░░░░░░░░███████████████████░  
	░░░░░░░░███░░░░░███████████░  
	░░░░░░░░███░███░███████████░  
	░░░░█░░░███░█░█░██████░████░  
	░░░░░░░░███░███░███████████░  
	░░░░░░░░███░░░░░███████████░  
	░░░░░░░░███████████████████░  
	░██████████████████████████░  
	░░░░░░░░░░░░░░░░░░░░░░░░░░░░  

	Internal map of area ids (stepwidth=1)
	 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 2 0 3 3 3 3 3 3 3 0 0
	 0 0 4 4 4 4 4 0 1 1 0 0 0 0 0 0 0 2 0 3 5 5 5 5 5 3 0 0
	 0 0 4 4 4 4 4 0 1 1 0 0 6 6 6 0 0 2 0 3 5 7 7 7 5 3 0 0
	 0 0 4 4 4 4 4 0 1 1 0 0 6 6 6 0 0 2 0 3 5 7 7 7 5 3 0 0
	 0 0 4 4 4 4 4 0 1 1 0 0 6 6 6 0 0 2 0 3 5 7 7 7 5 3 0 0
	 0 0 4 4 4 4 4 0 1 1 0 0 0 0 0 0 0 2 0 3 5 5 5 5 5 3 0 0
	 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 2 0 3 3 3 3 3 3 3 0 0
	 0 8 8 8 8 8 8 8 1 1 1 1 1 1 1 1 1 2 0 0 0 0 0 0 0 0 0 0
	 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 2 0 0 0 0 0 0 0 0 0 0
	 0 0 0 0 0 0 0 0 0 1 9 9 9 9 9 9 9 2 0 0 0 0 0 0 0 0 0 0
	 0 0 0 0 0 0 0 0 0 1 91010101010 9 2 0 01111111111 0 0 0
	 0 0 0 0 0 0 0 0 0 1 91010101010 9 2 0 01111111111 0 0 0
	 0 0 0 0 0 0 0 0 0 1 91010121010 9 2 0 01111111111 0 0 0
	 0 0 0 0 0 0 0 0 0 1 91010101010 9 2 0 01111111111 0 0 0
	 0 0 0 0 0 0 0 0 0 1 91010101010 9 2 0 01111111111 0 0 0
	 0 0 0 0 0 0 0 0 0 1 9 9 9 9 9 9 9 2 0 0 0 0 0 0 0 0 0 0
	 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 2 0 0 0 0 0 0 0 0 0 0
	 01313131313131313 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 0
	 0 0 0 0 0 0 0 013 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 0
	 0 0 0 0 0 0 0 013 1 11414141414 1 2 2 2 2 2 2 2 2 2 2 0
	 0 0 0 0 0 0 0 013 1 11415151514 1 2 2 2 2 2 2 2 2 2 2 0
	 0 0 0 016 0 0 013 1 11415171514 1 2 2 2 2 218 2 2 2 2 0
	 0 0 0 0 0 0 0 013 1 11415151514 1 2 2 2 2 2 2 2 2 2 2 0
	 0 0 0 0 0 0 0 013 1 11414141414 1 2 2 2 2 2 2 2 2 2 2 0
	 0 0 0 0 0 0 0 013 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 0
	 01919191919191913 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 0
	 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0


Returned tree structure (-1 = root node, 0 = background area):
-1  → 0  → 1  → 9  →10  →12 
         ↘14  →15  →17 
         ↘18 
         ↘ 3  → 5  → 7 
         ↘ 4 
         ↘ 6 
         ↘11 
         ↘16 

EXAMPLE USAGE:
	See example.c. Compile with 'make example'


FLAGS:
The flags (defined in settings.h) allows you to cut some non required code parts:

	BLOB_SORT_TREE:
	Sort tree by child node structure and area size. This provide 
	some robustness on rotation of the input image and is useful for tree comparsion.

	BLOB_DIMENSION:
	1 - Eval bounding boxes of areas.
	0 - Just eval tree structure of areas (faster).


	BLOB_DIAGONAL_CHECK:
	1 - Connect Areas which are contacted by corners. (recommended)
	0 - Just test edge releations (faster, for high resolution?!, untested).


	BLOB_SUBGRID_CHECK:
	 If you coarse the blob search and not check every pixel, the possible
	 boundary values are limited to values of the coarse grid. 
	 Enable BLOB_SUBGRID_CHECK to get the exact boundary values.
	 How does it works:
		If the algorithm check pixel D and i.e. D,A,B,C < thresh 
		A - - - C - - - E
		|       |     /
		|       |   /
		|       | /
		B - - - D
		D just get the same id as A,B and C has.
		Otherwise all pixels in the marked area get an id and the dimenions of the area are accurate.


	Very thin (<stepwidth) structures can mess up the
	structure of tree or/and bounding box detection.

	Example: Same image as above with stepwidth=2.
    (This is an bad examlpe to show the limits. The example
    image data oszillation is to high to get good results for
    stepwith > 1. It works quite good, if blob dimensions exceed the stepwidth. )
	 Area id map for stepwidth=2:
	 0 0 0 0 0 0 0 0 0 0 0 0 0   0   0   0   0   0   0 0 0 0
	 0 0 0 0 0 0 0 0 1 1 0 0                         3 3 0 0
	 0 0 1 1 1   1   1 1 0 0 0 0 0 0 0 1 0   0 0 0 0 0 3 0 0
	 0 0 1 1         1 1 0 0 4 4 4 0 0 1     0 6 6 6 0 3 0 0
	 0 0 1 1 1   1   1 1 0 0 4 4 4 0 0 1 0   0 6 6 6 0 3 0 0
	 0 0 1 1         1 1 0 0 4 4 4 0 0 1     0 6 6 6 0 3 0 0
	 0 0 1 1 1   1   1 1 0 0 0 0 0 0 0 1 0 8 0   0   0 3 0 0
	 0 0 0 0         1 1 0 0 0 0 0 0 0 1 0 8         3 3 0 0
	 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0   0   0 0 0 0
	 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 0 0         0 0 0 0
	 0   0   0   0   0   0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0
                         0 9 9 9 9 9 0 1 0 01010101010 0 0 0
	 0   0   0   0   0   0 9 9 9 9 9 0 1 0 0101010  10 0 0 0
                         0 9 911 9 9 0 1 0 01010    10 0 0 0
	 0   0   0   0   0   0 9 9 9 9 9 0 1 0 01010101010 0 0 0
                         0 9 9 9 9 9 0 1 0 01010101010 0 0 0
	 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0
	 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0
	 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1   1   1   1 1 1 0
	 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1             1 1 1 0
	 0   0 0 0 0 0 0 1 1 11515151515 1 1 1   1 1 1 1 1 1 1 0
	     0 0 0 0 0 0 1 1 115 1 1 115 1 1     1 1 1 1 1 1 1 0
	 0   0 016 0 0 0 1 1 115 120 115 1 1 1   1 118 1 1 1 1 0
	     0 0 0 0 0 0 1 1 115 1 1 115 1 1     1 1 1 1 1 1 1 0
	 0 0 0 0 0 0 0 0 1 1 11515151515 1 1 1 1 1 1 1 1 1 1 1 0
	 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0
	 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0
	 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

	 Area tree for stepwith=2:
			-1  → 0  → 1  →15 
										↘18 
										↘20 
							 ↘ 9  →11 
							 ↘ 3 
							 ↘ 6 
							 ↘ 8 
							 ↘ 4 
							 ↘10 
							 ↘16 

	 ⇒ There are several differences to the correct tree.


	 Area id map for stepwidth=4:
		 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
		 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 4 0 5 6 6 6 6 6 6 0 0
		 0 0 1 1 1 1 1 0 1 1 0 0 0 0 0 0 0 4 0   0 0 0 0 0 6 0 0
		 0 0 1 1 1 1 1 0 1 1 0 0 1 1 1 0 0 4     0 8 8 8 0 6 0 0
		 0 0 1 1 1 1 1 0 1       1 1 1 0 0 1 0 6 0 8 8 8 0 6 0 0
		 0 0 1 1 1 1 1 0         1 1 1 0 0 1 0 6 0 8 8 8 0 6 0 0
		 0 0 1 1 1 1 1           0 0 0 0 0 1 0 6 0 0 0 0 0 6 0 0
		 0 0 0 0 0 0             0 0 0 0 0 1 0 6 6 6 6 6 6 6 0 0
		 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0
		 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0
		 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0
		 0 0 0 0 0 0 0 0 0 1 01515151515 0 1 0 01616161616 0 0 0
		 0       0       0 1 01515151515 0 1 0 01616161616 0 0 0
		                 0 1 01515171515 0 1 0 01616161616 0 0 0
		                 0 1 01515151515 0 1 0 01616161616 0 0 0
		                 0 1 01515151515 0 1 0 01616161616 0 0 0
		 0       0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0
             0 0 0 0 0 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0
             1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0
             0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0
		 0 0 0 0 0 0 0 0 1 1 12020202020 1 1 1 1 1 1 1 1 1 1 1 0
		 0 0 0 0 0 0 0 0 1 1 12022222220 1 1 1 1 1 1 1 1 1 1 1 0
		 0 0 0 021 0 0 0 1 1 12022232220 1 1 1 1 1 124 1 1 1 1 0
		 0 0 0 0 0 0 0 0 1 1 12022222220 1 1 1 1 1 1 1 1 1 1 1 0
		 0 0 0 0 0 0 0 0 1 1 12020202020 1 1 1 1 1 1 1 1 1 1 1 0
		 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0
		 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0
		 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

	 Area tree for stepwith=4:
		-1  → 0  → 1  →20  →22  →23 
									↘24 
						 ↘15  →17 
						 ↘ 4 
						 ↘ 6 
						 ↘ 8 
						 ↘ 5 
						 ↘16 
						 ↘21 



==== 2. DEPTHBLOB ALGORITHM ======

CAPABILITIES:
 - Split greyscale image into regions with the same depth level 
 and 'search' blobs which exceed the levels.
 
 and returns tree structure of 
   founded blobs. The blobs can be nested. 

REMARKS:
 - Optional evaluation of blob bounding boxes.
 - Define region of interrest (ROI) to reduce evaluation time.
 - Coarse horizontal and/or vertical search to reduce evaluation time (untested).
 - node->data.area contains the exact number of pixels, not the bounding box area.
 - Easy filtering of result nodes. (cheap operation, no re-run needed)
